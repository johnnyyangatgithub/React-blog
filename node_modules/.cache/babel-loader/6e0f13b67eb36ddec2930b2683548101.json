{"ast":null,"code":"var _jsxFileName = \"/Users/johnny/react-blog/src/component/UserHeader.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUser } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UserHeader extends React.Component {\n  componentDidMount() {\n    this.props.fetchUser(this.props.userId);\n  }\n\n  render() {\n    if (!user) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    users: state.users.find(user => user.id === ownProps.userId)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchUser\n})(UserHeader);","map":{"version":3,"sources":["/Users/johnny/react-blog/src/component/UserHeader.js"],"names":["React","connect","fetchUser","UserHeader","Component","componentDidMount","props","userId","render","user","name","mapStateToProps","state","ownProps","users","find","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,YAA1B;;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACI,SAA/B,CAAyC;AAErCC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWJ,SAAX,CAAqB,KAAKI,KAAL,CAAWC,MAAhC;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAEL,QAAI,CAACC,IAAL,EAAW;AACP,aAAO,IAAP;AACH;;AAED,wBAAO;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBAAyBA,IAAI,CAACC;AAA9B;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAboC;;AAcxC;;AAED,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AAAEC,IAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYC,IAAZ,CAAiBN,IAAI,IAAIA,IAAI,CAACO,EAAL,KAAYH,QAAQ,CAACN,MAA9C;AAAT,GAAP;AACH,CAFD;;AAIA,eAAeN,OAAO,CAACU,eAAD,EAAkB;AAAET,EAAAA;AAAF,CAAlB,CAAP,CAAwCC,UAAxC,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUser } from '../actions';\n\nclass UserHeader extends React.Component {\n\n    componentDidMount() {\n        this.props.fetchUser(this.props.userId);\n    }\n\n    render() {\n\n        if (!user) {\n            return null;\n        }\n\n        return <div className='header'>{user.name}</div>;\n    }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    return { users: state.users.find(user => user.id === ownProps.userId) };\n};\n\nexport default connect(mapStateToProps, { fetchUser })(UserHeader);"]},"metadata":{},"sourceType":"module"}